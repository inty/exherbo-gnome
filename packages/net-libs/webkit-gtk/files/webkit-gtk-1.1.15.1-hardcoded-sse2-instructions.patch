Source: http://trac.webkit.org/changeset/48830/trunk
Upstream: ^^
Reason: Hardcoded SSE2 instructions causing 'Illegal instruction'-errors

Index: trunk/JavaScriptCore/jit/JITArithmetic.cpp
===================================================================
--- trunk/JavaScriptCore/jit/JITArithmetic.cpp (revision 48744)
+++ trunk/JavaScriptCore/jit/JITArithmetic.cpp (revision 48830)
@@ -636,12 +636,11 @@
         linkSlowCase(iter); // overflow check
 
-        if (!supportsFloatingPoint()) {
+        if (!supportsFloatingPoint())
             linkSlowCase(iter); // non-sse case
-            return;
-        }
-
-        ResultType opType = op == op1 ? types.first() : types.second();
-        if (!opType.definitelyIsNumber())
-            linkSlowCase(iter); // double check
+        else {
+            ResultType opType = op == op1 ? types.first() : types.second();
+            if (!opType.definitelyIsNumber())
+                linkSlowCase(iter); // double check
+        }
     } else {
         linkSlowCase(iter); // overflow check
Index: trunk/JavaScriptCore/jit/JITOpcodes.cpp
===================================================================
--- trunk/JavaScriptCore/jit/JITOpcodes.cpp (revision 48525)
+++ trunk/JavaScriptCore/jit/JITOpcodes.cpp (revision 48830)
@@ -795,12 +795,15 @@
     addJump(jump(), target + 2);
 
-    isNotInteger.link(this);
-
-    addSlowCase(branch32(Above, regT1, Imm32(JSValue::LowestTag)));
-
-    zeroDouble(fpRegT0);
-    emitLoadDouble(cond, fpRegT1);
-    addJump(branchDouble(DoubleEqual, fpRegT0, fpRegT1), target + 2);
-    
+    if (supportsFloatingPoint()) {
+        isNotInteger.link(this);
+
+        addSlowCase(branch32(Above, regT1, Imm32(JSValue::LowestTag)));
+
+        zeroDouble(fpRegT0);
+        emitLoadDouble(cond, fpRegT1);
+        addJump(branchDouble(DoubleEqual, fpRegT0, fpRegT1), target + 2);
+    } else
+        addSlowCase(isNotInteger);
+
     isTrue.link(this);
     isTrue2.link(this);
@@ -833,12 +836,15 @@
     addJump(jump(), target + 2);
 
-    isNotInteger.link(this);
-
-    addSlowCase(branch32(Above, regT1, Imm32(JSValue::LowestTag)));
-
-    zeroDouble(fpRegT0);
-    emitLoadDouble(cond, fpRegT1);
-    addJump(branchDouble(DoubleNotEqual, fpRegT0, fpRegT1), target + 2);
-    
+    if (supportsFloatingPoint()) {
+        isNotInteger.link(this);
+
+        addSlowCase(branch32(Above, regT1, Imm32(JSValue::LowestTag)));
+
+        zeroDouble(fpRegT0);
+        emitLoadDouble(cond, fpRegT1);
+        addJump(branchDouble(DoubleNotEqual, fpRegT0, fpRegT1), target + 2);
+    } else
+        addSlowCase(isNotInteger);
+
     isFalse.link(this);
     isFalse2.link(this);
Index: trunk/JavaScriptCore/ChangeLog
===================================================================
--- trunk/JavaScriptCore/ChangeLog (revision 48827)
+++ trunk/JavaScriptCore/ChangeLog (revision 48830)
@@ -1,2 +1,18 @@
+2009-09-28  Oliver Hunt  <oliver@apple.com>
+
+        Reviewed by Geoff Garen.
+
+        Hard dependency on SSE2 instruction set with JIT
+        https://bugs.webkit.org/show_bug.cgi?id=29779
+
+        Add floating point support checks to op_jfalse and op_jtrue, and
+        fix the logic for the slow case of op_add
+
+        * jit/JITArithmetic.cpp:
+        (JSC::JIT::emitSlow_op_add):
+        * jit/JITOpcodes.cpp:
+        (JSC::JIT::emit_op_jfalse):
+        (JSC::JIT::emit_op_jtrue):
+
 2009-09-28  Yaar Schnitman  <yaar@chromium.org>
 
